#!/usr/bin/env ruby

# Copyright 2016 Rachel Evans
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'aws-sdk'
require 'json'

@name = File.basename $0

# Just me being extra careful
def has_no_resources?(cfn_client, stack_id)
  r = cfn_client.describe_stack_resources(stack_name: stack_id)
  r.stack_resources.reject {|res| res.resource_status == "DELETE_COMPLETE"}.empty?
end

client_options = {}
dry_run = false
min_age = 7 * 86400

opts_parser = OptionParser.new do |opts|
  opts.banner = "
  #{@name} [OPTIONS]
  "
  opts.separator "Controlling which events to select:"
  opts.on("-r", "--region=s", "CloudFormation region"){|r| client_options[:region] = r }
  opts.on("-m", "--min-age=s", "Minimum age (in seconds) of stack before it will be deleted"){|r| min_age = r.to_i }
  opts.on("-n", "--dry-run", "Don't actually delete anything"){|r| dry_run = true }
  opts.separator <<EOF

In AWS CloudFormation, if a stack fails to create, then it rolls back (any
resources it had are deleted), and it goes into ROLLBACK_COMPLETE state, so
that its events can be inspected to understand the cause of the failure.  Once
these events are no longer required, the stack can be deleted.  Stacks in
ROLLBACK_COMPLETE stay there indefinitely until "DeleteStack" is called.

#{@name} enumerates stacks in ROLLBACK_COMPLETE state, finds those which are
older than (by default) a week, and – assuming their events are no longer
required – deletes each stack thus found.

EOF
end

opts_parser.parse!

ARGV.count == 0 or raise "Usage: #{@name} [OPTIONS]"

cfn_client = Aws::CloudFormation::Client.new(client_options)
stacks = cfn_client.list_stacks(
  stack_status_filter: %w[ ROLLBACK_COMPLETE ],
)

now = Time.now.utc
threshold = now - min_age

todo = []
loop do
  stacks.stack_summaries.each do |s|
    expired = (s.creation_time < threshold)
    # p [ expired, s.creation_time, s.stack_status, s.stack_name, s.stack_id ]
    todo << s if expired
  end
  break unless stacks.next_page?
  stacks = stacks.next_page
end

results = todo.map do |to_delete|
  begin
    puts JSON.generate(to_delete: to_delete.to_h)

    # Just in case I've misunderstood the ROLLBACK_COMPLETE state
    unless has_no_resources?(cfn_client, to_delete.stack_id)
      raise "Stack still has resources!"
    end

    unless dry_run
      cfn_client.delete_stack(stack_name: to_delete.stack_id)
    end

    true
  rescue Exception => e
    $stderr.puts JSON.generate(error: { stack_id: to_delete.stack_id, message: e.to_s })
    false
  end
end

ok = results.all? {|t| t}

ok or exit 1
